AS MELHORIAS SERIA PARA ESTES CÓDOGOS QUE JA ESTÃO PRONTOS E FUNCIONAL.. APENAS QUERO ESTAS MELHORIAS.. 
Melhorias e esperiencia do usuario
1º Somar os valores em Resumo de Acertos (vide foto onde está escrito - VALOR EM REAIS individual - adicione em um lugar o valor total de ganhos para UM TOTAL DE GANHOS..)
ou seja colocar os valores individual e depois fazer um resumo do valor ganho em tantos concursos.. 
1º A - mostrar a frequencia com que os 15 numeros foram sorteados....
1º B - Armazenar os numeros digitados no conferidor que atingiran 13 e 14 pontos.
2º Arrumar a barra de progresso que deve ser atualizada conforme vai sendo consultados os concursos.. (vide foto onde esta escrito PROGRESSO EM TEMPO REAL)
3º Adicionar um campo para mostar os numeros selecionados (vide foto - CAMPO ONDE AS DEZENAS SELECIONADAS IRÃO APARECER)
4º Adicionar um botão LIMPAR (Torne o funcional)
5º Adicionar um botão PREMIAÇÃO (Torne o funcional)
6º Adicionar um botão PALPITE (Traga um poupup, onde o usuario seleciona quantas dezenas deseja e o sistema seleciona as dezenas pra ele) (Torne o funcional)





ESTRUTURA.. PRONTA JA E FUNCIONAL.. 
lotofacil_checker/
├── static/
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── main.js
├── templates/
│   └── index.html
├── app.py
└── requirements.txt

Flask==2.0.1
Werkzeug==2.0.3
requests==2.26.0
python-dotenv==0.19.0

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conferidor Lotofácil</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Conferidor Lotofácil</h1>

        <!-- Progress overlay -->
        <div id="progress-overlay" class="progress-overlay hidden">
            <div class="progress-container">
                <h3 id="progress-status">Consultando resultados...</h3>
                <div class="progress-bar-container">
                    <div id="progress-bar" class="progress-bar"></div>
                </div>
                <p id="progress-detail">Preparando consulta...</p>
            </div>
        </div>

        <!-- Grid de números -->
        <div class="numbers-grid">
            <!-- Números de 1 a 25 -->
            {% for i in range(1, 26) %}
            <div class="number" data-number="{{ '%02d' % i }}" draggable="true">{{ i }}</div>
            {% endfor %}
        </div>

        <!-- Dezenas selecionadas -->
        <div class="selected-numbers">
            <p>Dezenas selecionadas: <span id="selected-count">0</span></p>
            <div id="selected-numbers-display"></div>
        </div>

        <!-- Controles -->
        <div class="controls">
            <div class="input-group">
                <label for="inicio">Concurso Inicial:</label>
                <input type="number" id="inicio" min="1">
            </div>
            <div class="input-group">
                <label for="fim">Concurso Final:</label>
                <input type="number" id="fim" min="1" value="{{ ultimo_concurso }}">
            </div>
            <div class="checkbox-group">
                <input type="checkbox" id="apenas-premiados">
                <label for="apenas-premiados">Somente Premiados</label>
            </div>
            <button id="conferir" class="btn-conferir">Conferir</button>
        </div>

        <!-- Resumo de acertos -->
        <div class="resumo">
            <h2>Resumo de Acertos</h2>
            <div class="acertos-grid">
                <div class="acerto-box" data-acertos="11">
                    <h3>11 Acertos</h3>
                    <p class="count">0</p>
                </div>
                <div class="acerto-box" data-acertos="12">
                    <h3>12 Acertos</h3>
                    <p class="count">0</p>
                </div>
                <div class="acerto-box" data-acertos="13">
                    <h3>13 Acertos</h3>
                    <p class="count">0</p>
                </div>
                <div class="acerto-box" data-acertos="14">
                    <h3>14 Acertos</h3>
                    <p class="count">0</p>
                </div>
                <div class="acerto-box" data-acertos="15">
                    <h3>15 Acertos</h3>
                    <p class="count">0</p>
                </div>
            </div>
        </div>

        <!-- Resultados -->
        <div class="resultados">
            <h2>Resultados</h2>
            <div id="resultados-list"></div>
        </div>
    </div>

    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>


document.addEventListener('DOMContentLoaded', function () {
    const selectedNumbers = new Set();
    const numbersGrid = document.querySelector('.numbers-grid');
    const selectedCountDisplay = document.getElementById('selected-count');
    const conferirButton = document.getElementById('conferir');
    const progressOverlay = document.getElementById('progress-overlay');
    const progressBar = document.getElementById('progress-bar');
    const progressStatus = document.getElementById('progress-status');
    const progressDetail = document.getElementById('progress-detail');

    // Função para atualizar o progresso
    function updateProgress(percent, status, detail) {
        progressBar.style.width = `${percent}%`;
        if (status) progressStatus.textContent = status;
        if (detail) progressDetail.textContent = detail;
    }

    function showProgress() {
        progressOverlay.classList.remove('hidden');
        updateProgress(0, 'Iniciando consulta...', 'Preparando dados...');
    }

    function hideProgress() {
        progressOverlay.classList.add('hidden');
        updateProgress(0);
    }

    // Seleção de números
    numbersGrid.addEventListener('click', function (e) {
        const numberElement = e.target.closest('.number');
        if (!numberElement) return;

        const number = parseInt(numberElement.dataset.number);
        if (selectedNumbers.has(number)) {
            selectedNumbers.delete(number);
            numberElement.classList.remove('selected');
        } else if (selectedNumbers.size < 15) {
            selectedNumbers.add(number);
            numberElement.classList.add('selected');
        }

        selectedCountDisplay.textContent = selectedNumbers.size;
    });

    // Clique no botão "Conferir"
    conferirButton.addEventListener('click', async function () {
        if (selectedNumbers.size !== 15) {
            alert('Selecione exatamente 15 números!');
            return;
        }

        const inicio = document.getElementById('inicio').value;
        const fim = document.getElementById('fim').value;
        const apenasPremiados = document.getElementById('apenas-premiados').checked;

        if (!inicio || !fim || parseInt(inicio) > parseInt(fim)) {
            alert('Por favor, insira um intervalo válido de concursos!');
            return;
        }

        showProgress();

        try {
            const totalConcursos = parseInt(fim) - parseInt(inicio) + 1;
            let processados = 0;

            const response = await fetch('/conferir', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    inicio: parseInt(inicio),
                    fim: parseInt(fim),
                    numerosJogados: Array.from(selectedNumbers),
                    apenasPremiados: apenasPremiados,
                }),
            });

            // Simulação de progresso durante a consulta
            const progressInterval = setInterval(() => {
                processados++;
                const percentual = Math.min((processados / totalConcursos) * 100, 95);
                updateProgress(
                    percentual,
                    'Consultando resultados...',
                    `Processando concurso ${parseInt(inicio) + processados - 1} de ${fim}`
                );
            }, 100);

            const data = await response.json();

            clearInterval(progressInterval);
            updateProgress(100, 'Concluído!', 'Atualizando resultados...');

            // Pequeno delay para mostrar a conclusão
            setTimeout(() => {
                hideProgress();
                updateResults(data);
            }, 500);
        } catch (error) {
            hideProgress();
            console.error('Erro ao conferir resultados:', error);
            alert('Erro ao conferir resultados. Tente novamente.');
        }
    });

    function updateResults(data) {
        // Atualizar resumo
        const resumoBoxes = document.querySelectorAll('.acerto-box');
        resumoBoxes.forEach((box) => {
            const acertos = parseInt(box.dataset.acertos);
            const count = data.resumo[acertos] || 0;
            box.querySelector('.count').textContent = count;
        });

        // Atualizar lista de resultados
        const resultadosList = document.getElementById('resultados-list');
        resultadosList.innerHTML = '';

        data.resultados.forEach((resultado) => {
            const resultadoElement = document.createElement('div');
            resultadoElement.className = 'resultado-item';

            const dezenasHtml = resultado.dezenas
                .map((dezena) => {
                    const isAcertada = selectedNumbers.has(dezena);
                    return `<span class="number ${isAcertada ? 'dezena-acertada' : ''}">${dezena}</span>`;
                })
                .join(' ');

            resultadoElement.innerHTML = `
                <h3>Concurso ${resultado.concurso}</h3>
                <p>Acertos: ${resultado.acertos}</p>
                <p>Prêmio: R$ ${resultado.premio.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
                <div class="dezenas">
                    ${dezenasHtml}
                </div>
            `;

            resultadosList.appendChild(resultadoElement);
        });
    }
});

:root {
    --primary-color: #00693e;
    --secondary-color: #4CAF50;
    --background-color: #f5f5f5;
    --text-color: #333;
    --border-radius: 8px;
    --shadow: 0 2px 4px rgba(0,0,0,0.1);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h1 {
    text-align: center;
    color: var(--primary-color);
    margin-bottom: 30px;
}

.numbers-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 10px;
    margin-bottom: 20px;
    max-width: 500px;
    margin: 0 auto;
}

.number {
    background-color: white;
    border: 2px solid var(--primary-color);
    border-radius: var(--border-radius);
    padding: 0.3rem;
    text-align: center;
    /*cursor: pointer;*/
    transition: all 0.3s ease;
}

.number.selected {
    background-color: var(--primary-color);
    color: white;
}

.controls {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin: 20px 0;
    justify-content: center;
}

.input-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

input[type="number"] {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: var(--border-radius);
    width: 120px;
}

.btn-conferir {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn-conferir:hover {
    background-color: var(--secondary-color);
}

.acertos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.acerto-box {
    background-color: white;
    padding: 20px;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    text-align: center;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.acerto-box:hover {
    transform: translateY(-5px);
}

.resultados {
    margin-top: 30px;
}

.resultado-item {
    background-color: white;
    padding: 20px;
    margin-bottom: 10px;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.dezena-acertada {
    background-color: #4CAF50;
    color: white;
}
/* Adicionar ao CSS existente */

.progress-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(3px);
}

.progress-overlay.hidden {
    display: none;
}

.progress-container {
    background-color: white;
    padding: 2rem;
    border-radius: 12px;
    width: 90%;
    max-width: 500px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.progress-container h3 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
}

.progress-bar-container {
    width: 100%;
    height: 20px;
    background-color: #f0f0f0;
    border-radius: 10px;
    overflow: hidden;
    margin: 1rem 0;
}

.progress-bar {
    width: 0%;
    height: 100%;
    background-color: var(--primary-color);
    transition: width 0.3s ease;
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        rgba(255, 255, 255, 0.1) 0%,
        rgba(255, 255, 255, 0.2) 50%,
        rgba(255, 255, 255, 0.1) 100%
    );
    animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

#progress-detail {
    color: #666;
    margin-top: 1rem;
    font-size: 0.9rem;
}

/* Resto do CSS mantido igual */

@media (max-width: 768px) {
    .numbers-grid {
        grid-template-columns: repeat(5, 1fr);
        gap: 5px;
    }
    
    .controls {
        flex-direction: column;
        align-items: center;
    }
    
    .acertos-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 480px) {
    .container {
        padding: 10px;
    }
    
    .numbers-grid {
        grid-template-columns: repeat(5, 1fr);
    }
    
    .acertos-grid {
        grid-template-columns: 1fr;
    }
}


from flask import Flask, render_template, jsonify, request
import requests
from datetime import datetime
import os

app = Flask(__name__)

def get_latest_concurso():
    try:
        response = requests.get('https://loteriascaixa-api.herokuapp.com/api/lotofacil/latest')
        data = response.json()
        return data['concurso']
    except:
        return None

def get_lotofacil_result(concurso):
    try:
        response = requests.get(f'https://loteriascaixa-api.herokuapp.com/api/lotofacil/{concurso}')
        return response.json()
    except:
        return None

@app.route('/')
def index():
    ultimo_concurso = get_latest_concurso()
    return render_template('index.html', ultimo_concurso=ultimo_concurso)

@app.route('/conferir', methods=['POST'])
def conferir():
    data = request.json
    inicio = int(data['inicio'])
    fim = int(data['fim'])
    numeros_jogados = [str(num).zfill(2) for num in data['numerosJogados']]  # Convertendo para formato "01", "02", etc
    apenas_premiados = data['apenasPremiados']
    
    resultados = []
    resumo = {11: 0, 12: 0, 13: 0, 14: 0, 15: 0}
    
    for concurso in range(inicio, fim + 1):
        resultado = get_lotofacil_result(concurso)
        if resultado:
            dezenas_sorteadas = resultado['dezenas']  # Já vem no formato correto da API
            acertos = len(set(numeros_jogados) & set(dezenas_sorteadas))
            
            if acertos >= 11:
                premio = 0
                for premiacao in resultado['premiacoes']:
                    if premiacao['descricao'] == f'{acertos} acertos':
                        premio = premiacao['valorPremio']
                        break
                
                if not apenas_premiados or premio > 0:
                    resumo[acertos] += 1
                    resultados.append({
                        'concurso': concurso,
                        'dezenas': dezenas_sorteadas,
                        'acertos': acertos,
                        'premio': premio
                    })
    
    return jsonify({
        'resultados': resultados,
        'resumo': resumo
    })

# Agora a parte de configuração da porta
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))  # Obtém a porta do ambiente ou usa 5000 como padrão
    app.run(host="0.0.0.0", port=port)  # Inicia o servidor Flask na porta correta
